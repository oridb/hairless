use std
use bio

use "types.use"

pkg pg =
	const writehdr	: (f : bio.file#, rules : rules# -> void)
	const writedfa	: (f : bio.file#, dfa : dfa# -> void)
	const writelalr : (f : bio.file#, tab : int[:] -> void)
;;

const writehdr = {f, rules
	bio.put(f, "use std\n")
	for u in rules.uses
		bio.put(f, "use {}\n", u)
	;;
	bio.put(f, "pkg {} =\n", rules.pkgname)
	bio.put(f, "\tconst parse	: (str : byte[:] -> void)\n")
	bio.put(f, ";;\n")

	bio.put(f, "const parse = {{str\n")
	bio.put(f, "\tvar tok\n")
	bio.put(f, "\twhile true\n")
	bio.put(f, "\t\t(tok, str) = readtok(str)\n")
	bio.put(f, "\t\tif tok.len > 0\n")
	bio.put(f, "\t\t\tstd.put(\"tok: {{}}\\n\", tok)\n")
	bio.put(f, "\t\telse\n")
	bio.put(f, "\t\t\tstd.put(\"eof\\n\")\n")
	bio.put(f, "\t\t\tbreak\n")
	bio.put(f, "\t\t;;\n")
	bio.put(f, "\t;;\n")
	bio.put(f, "}}\n")
}

const writedfa = {f, dfa
	var st

	st = 0
	bio.put(f, "const readtok = {{str\n")
	bio.put(f, "\tvar state, off, mark, len\n")
	bio.put(f, "\n")
	bio.put(f, "\tstate = 1\n")
	bio.put(f, "\tmark = 0\n")
	bio.put(f, "\tlen = 0\n")
	bio.put(f, "\toff = 0\n")
	bio.put(f, "\twhile off < str.len\n")
	bio.put(f, "\t\tmatch (state, str[off])\n")
	for trans in dfa.trans
		for (chr, next) in trans
			bio.put(f, "\t\t| ({}, {}):", st, chr)
			bio.put(f, "\t\t\tstate = {}\n", next)
			if std.bshas(dfa.accept, st)
				bio.put(f, "\t\t\tmark = {}\n", st)
				bio.put(f, "\t\t\tlen = off + 1\n")
			;;
		;;
		st++
	;;
	bio.put(f, "\t\t| _: break\n")
	bio.put(f, "\t\t;;\n")
	bio.put(f, "\t\toff++\n")
	bio.put(f, "\t;;\n")
	bio.put(f, "\tif len != 0\n")
	bio.put(f, "\t\t-> (str[:len], str[len:])\n")
	bio.put(f, "\telse\n")
	bio.put(f, "\t\t-> (\"\", str[len:])\n")
	bio.put(f, "\t;;\n")
	bio.put(f, "}}\n")
	bio.put(f, "\n")
}

const writelalr = {f, tab
}
