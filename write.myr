use std
use bio

use "types"

pkg pg =
	const writehdr	: (f : bio.file#, rules : rules# -> void)
	const writedfa	: (f : bio.file#, rules : rules#, dfa : dfa# -> void)
	const writeslr	: (f : bio.file#, rules : rules#, lr : slr# -> void)
;;

const writehdr = {f, rules
	var tags, ty, ret

	for u in rules.uses
		bio.put(f, "use {}\n", u)
	;;

	match std.htget(rules.stypes, rules.start)
	| `std.None:
		ret = std.fmt("bool")
	| `std.Some tyname:
		ret = std.fmt("std.option({})", std.get(std.htget(rules.types, tyname)))
	;;

	bio.put(f, "pkg {} =\n", rules.package)
	bio.put(f, "\tconst {}	: (str : byte[:] -> {})\n", rules.func, ret)
	bio.put(f, ";;\n")
	std.slfree(ret)

	bio.write(f, rules.myr)

	tags = std.htkeys(rules.types)
	bio.put(f, "type _symval = union\n")
	bio.put(f, "\t`Sym__void\n")
	for t in tags
		ty = std.htgetv(rules.types, t, "")
		bio.put(f, "\t`Sym_{} {}\n", t, ty)
	;;
	bio.put(f, ";;\n\n")
	for t in tags
		ty = std.htgetv(rules.types, t, "")
		bio.put(f, "const extract_{} = {{val : _symval -> {}\n", t, ty)
		bio.put(f, "\tmatch val\n")
		bio.put(f, "\t| `Sym_{} sv: -> sv\n", t)
		bio.put(f, "\t| _: std.die(\"invalid extraction\\n\")\n")
		bio.put(f, "\t;;\n")
		bio.put(f, "}}\n\n")
	;;
	std.slfree(tags)
}

const writedfa = {f, rl, dfa
	var st

	st = 0
	bio.put(f, "const readtok = {{str\n")
	bio.put(f, "\tvar state, off, mark, len, skip, tok\n")
	bio.put(f, "\n")
	bio.put(f, ":__skip_tok\n")
	bio.put(f, "\tstate = 1\n")
	bio.put(f, "\tmark = 0\n")
	bio.put(f, "\tlen = 0\n")
	bio.put(f, "\toff = 0\n")
	bio.put(f, "\tskip = true\n")
	bio.put(f, "\tif str.len == 0\n")
	bio.put(f, "\t\t-> (0, \"\", \"\")\n")
	bio.put(f, "\t;;\n")
	bio.put(f, "\ttok = -1 /* error */\n")
	bio.put(f, "\tskip=false\n")
	bio.put(f, "\twhile off < str.len\n")
	bio.put(f, "\t\tmatch (state, str[off])\n")
	for trans in dfa.trans
		for (chr, next) in trans
			bio.put(f, "\t\t| ({}, {}): /* {} */\n", st, chr, (chr : char))
			bio.put(f, "\t\t\tstate = {}\n", next)
			match std.htget(dfa.accept, next)
			| `std.Some tok:
				bio.put(f, "\t\t\tmark = {}\n", st)
				bio.put(f, "\t\t\tlen = off + 1\n")
				bio.put(f, "\t\t\ttok = {}\n", tok)
				if std.bshas(dfa.skip, tok)
					bio.put(f, "\t\t\tskip = true\n")
				else 
					bio.put(f, "\t\t\tskip = false\n")
				;;
			| `std.None:
				/* nothing */
			;;
		;;
		st++
	;;
	bio.put(f, "\t\t| _:\n")
	bio.put(f, "\t\t\tif skip\n")
	bio.put(f, "\t\t\t\tstr = str[len:]\n")
	bio.put(f, "\t\t\t\tgoto __skip_tok\n")
	bio.put(f, "\t\t\telse\n")
	bio.put(f, "\t\t\t\tbreak\n")
	bio.put(f, "\t\t\t;;\n")
	bio.put(f, "\t\t;;\n")
	bio.put(f, "\t\toff++\n")
	bio.put(f, "\t;;\n")
	bio.put(f, "\t-> (tok, str[:len], str[len:])\n")
	bio.put(f, "}}\n")
	bio.put(f, "\n")
}

const writeslr = {f, rl, lr
	var tab
	var s, i
	var okret, failret

	tab = std.slzalloc(lr.states.len)
	for var i = 0; i < tab.len; i++
		tab[i] = std.slzalloc((rl.nsym : std.size))
	;;

	for (src, dst, sym) in lr.shift
		tab[src][sym] = dst
	;;

	for (src, rule, sym) in lr.reduce
		if tab[src][sym] > 0
			std.put("state {}@{}: shift/reduce conflict\n", src, rule)
		elif tab[src][sym] < 0
			std.put("state {}@{}: reduce/reduce conflict\n", src, rule)
		else
			tab[src][sym] = (-rule : int)
		;;
	;;

	bio.put(f, "const gram = [\n")
	bio.put(f, "/*\t\t")
	for s = 0; s < rl.nsym; s++
		bio.put(f, "{}\t", symstr(rl, s))
	;;
	bio.put(f, "*/\n")

	i = 0
	for row in tab
		bio.put(f, "/*{}*/\t[", i++)
		for col in row
			bio.put(f, "\t{},", col)
		;;
		bio.put(f, "],\n")
	;;
	bio.put(f, "]\n")

	bio.put(f, "const rulelen = [\n")
	bio.put(f, "\t-1, /* invalid rule */\n")
	for r in rl.rules
		bio.put(f, "\t{},\n", r.rhs.len)
	;;
	bio.put(f, "]\n")

	bio.put(f, "const rulelhs = [\n")
	bio.put(f, "\t-1, /* invalid rule */\n")
	for r in rl.rules
		bio.put(f, "\t{},\n", r.lhs)
	;;
	bio.put(f, "]\n")

	actions(f, rl)

	match std.htget(rl.stypes, rl.start)
	| `std.Some tag:
		okret = std.fmt("`std.Some extract_{}(vals[vals.len - 1])", tag)
		failret = std.fmt("`std.None")
	| `std.None:
		okret = std.fmt("true")
		failret = std.fmt("false")
	;;

	bio.put(f, "var stk	: int[:]\n")
	bio.put(f, "var vals	: _symval[:]\n")
	bio.put(f, "\n")
	bio.put(f, "const {} = {{rest\n", rl.func)
	bio.put(f, "\tvar tok, e, st\n")
	bio.put(f, "\tvar str, val\n")
	bio.put(f, "\n")
	bio.put(f, "\tstk = std.slpush([][:], 1)\n")
	bio.put(f, "\t(tok, str, rest) = readtok(rest)\n")
	bio.put(f, "\twhile true /* accept */\n")
	bio.put(f, "\t\tif tok == -1\n")
	bio.put(f, "\t\t\tstd.fatal(\"invalid token {{}}\\n\", tok)\n")
	bio.put(f, "\t\t;;\n")
	bio.put(f, "\n")
	bio.put(f, "\t\te = gram[stk[stk.len-1]][tok]\n")
	bio.put(f, "\t\tif e == 1<<30\n")
	bio.put(f, "\t\t\t-> {}\n", okret)
	bio.put(f, "\t\telif e > 0 /* shift */\n")
	bio.put(f, "\t\t\tstk = std.slpush(stk, e)\n")
	bio.put(f, "\t\t\tvals = std.slpush(vals, `Sym__str str)\n")
	bio.put(f, "\t\t\t(tok, str, rest) = readtok(rest)\n")
	bio.put(f, "\t\telif e < 0 /* reduce */\n")
	bio.put(f, "\t\t\tval = reduceaction(stk, -e)\n")
	bio.put(f, "\t\t\tstk = std.slgrow(stk, stk.len - rulelen[-e])\n")
	bio.put(f, "\t\t\tvals = std.slgrow(vals, vals.len - rulelen[-e])\n")
	bio.put(f, "\t\t\tst = gram[stk[stk.len - 1]][rulelhs[-e]]\n")
	bio.put(f, "\t\t\tstk = std.slpush(stk, st)\n")
	bio.put(f, "\t\t\tvals = std.slpush(vals, val)\n")
	bio.put(f, "\t\telse /* error */\n")
	bio.put(f, "\t\t\tstd.fatal(\"syntax error\\n\")\n")
	bio.put(f, "\t\t;;\n")
	bio.put(f, "\t;;\n")
	bio.put(f, "\t-> {}\n", failret)
	bio.put(f, "}}\n")
}

const actions = {f, rl
	for r in rl.rules
		bio.put(f, "const act{} = {{", r.id)
		actargs(f, rl, r)
		bio.put(f, "{}}}\n", r.act)
	;;
	bio.put(f, "const reduceaction = {{stk, id\n")
	bio.put(f, "\tmatch id\n")
	for r in rl.rules
		bio.put(f, "\t| {}:\n", r.id)
		match std.htget(rl.stypes, r.lhs)
		| `std.Some tag:
			bio.put(f, "\t\t-> `Sym_{} act{}(", tag, r.id)
			extractargs(f, rl, r)
			bio.put(f, ")\n")
		| `std.None:
			bio.put(f, "\t\tact{}(", r.id)
			extractargs(f, rl, r)
			bio.put(f, ")\n")
			bio.put(f, "\t\t-> `Sym__void\n")
		;;
	;;
	bio.put(f, "\t| _: std.die(\"bad action\\n\")\n")
	bio.put(f, "\t;;\n")
	bio.put(f, "}}\n")
}

const actargs = {f, rl, r
	var i
	var sep

	sep = ""
	for i = 0; i < r.rhs.len; i++
		match std.htget(rl.stypes, r.rhs[i])
		| `std.None:	/* nothing */
		| `std.Some tyname:
			match std.htget(rl.types, tyname)
			| `std.Some myrtype:
				bio.put(f, "{}a{} : {}", sep, i, myrtype)
			| `std.None:
				std.fatal("rule '{}': unknown type '{}'\n", symstr(rl, r.lhs) , tyname)
			;;
			sep = ", "
		;;
	;;

	match std.htget(rl.stypes, r.lhs)
	| `std.None:	/* nothing */
		bio.put(f, "-> void")
	| `std.Some tyname:
		match std.htget(rl.types, tyname)
		| `std.Some myrtype:
			bio.put(f, "-> {}", myrtype)
		| `std.None:
			std.fatal("rule '{}': unknown type '{}'\n", r.id, tyname)
		;;
	;;
	bio.put(f, "\n")
}

const extractargs = {f, rl, rule
	var i
	var sep

	sep = ""
	for i = 0; i < rule.rhs.len; i++
		match std.htget(rl.stypes, rule.rhs[i])
		| `std.None:	/* nothing */
		| `std.Some t:
			bio.put(f, "{}extract_{}(vals[vals.len - {}])", sep, t, rule.rhs.len - i)
		;;
		sep = ", "
	;;
}

const symstr = {rl, sym
	match std.htget(rl.symname, sym)
	| `std.Some str:	-> str
	| `std.None:	std.put("no sym {}\n", sym)
		-> "???"
	;;
}

