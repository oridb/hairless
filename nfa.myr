use std
use regex

use "types.use"

pkg pg =
	const mknfa	: (rl : rules# -> nfa#)
	const nfadump	: (nfa : nfa# -> void)
;;


/*
Creates an NFA from a list of tokens.

This doesn't try to be the most efficient NFA, just
one that works. It also keeps track of which symbol
each 'main branch' of the NFA corresponds to.
*/
const mknfa = {rl
	var nfa

	nfa = std.mk([
		.skip = std.mkbs(),
		.accept = std.mkht(std.inthash, std.inteq),
	])
	addstate(nfa)	/* initial state */
	for t in rl.toks
		if t.isregex
			addre(nfa, t)
		else
			addstr(nfa, t)
		;;
	;;

	if opt_dbg
		nfadump(nfa)
	;;
	-> nfa
}

/* adds a quoted string token. This is just a byte sequence. */
const addstr = {nfa, str
	st = addstate(nfa)
	trans(nfa, 0, `Eps st)
	for b in str.pat
		new = addstate(nfa)
		trans(nfa, st, `Byte (new, b))
		st = new
	;;
	std.htput(nfa.accept, st, str.sym)
	if str.skip
		std.bsput(nfa.skip, str.sym)
	;;

	var st, new
}

/* This adds a Myrddin flavor regex to the NFA. */
const addre = {nfa, pat
	var st

	match regex.parse(pat.pat)
	| `std.Ok re:
		st = addstate(nfa)
		trans(nfa, 0, `Eps st)
		st = re2nfa(nfa, st, re)
		std.htput(nfa.accept, st, pat.sym)
		if pat.skip
			std.bsput(nfa.skip, pat.sym)
		;;
	| `std.Fail m:
		std.fatal("invalid regex {}: {}\n", pat.pat, m)
	;;
}

/* straightforward conversion of regex AST to NFA */
const re2nfa = {nfa, start, re
	var buf : byte[std.Maxcharlen]
	var s, t, u, v
	var i

	match re#
	| `regex.Alt (l, r):
		s = addstate(nfa)
		trans(nfa, start, `Eps s)
		t = re2nfa(nfa, s, l)

		t = addstate(nfa)
		trans(nfa, start, `Eps t)
		u = re2nfa(nfa, t, r)

		v = addstate(nfa)
		trans(nfa, t, `Eps v)
		trans(nfa, u, `Eps v)
		-> v

	| `regex.Cat (l, r):
		/* just concatenate the NFAs. */
		s = re2nfa(nfa, start, l)
		-> re2nfa(nfa, s, r)

	| `regex.Star (r, false):
		s = re2nfa(nfa, start, r)
		trans(nfa, s, `Eps start)
		-> start
	| `regex.Plus (r, false):
		s = re2nfa(nfa, start, r)
		t = re2nfa(nfa, s, r)
		trans(nfa, t, `Eps s)
		-> s
	| `regex.Quest r:
		s = re2nfa(nfa, start, r)
		trans(nfa, start, `Eps s)
		-> s
	| `regex.Chr chr:
		std.encode(buf[:], chr)
		s = start
		for i = 0; i < std.charlen(chr); i++
			t = addstate(nfa)
			trans(nfa, s, `Byte (t, buf[i]))
			s = t
		;;
		-> s

	| `regex.Ranges rl:
		s = addstate(nfa)
		for r in rl
			/* FIXME: this is preventing '.' from working. */
			if r[0] > 0x7f || r[1] > 0x7f
				std.fatal("unicode ranges not yet supported\n")
			;;
			if r[0] < r[1]
				trans(nfa, start, `Range (s, (r[0] : byte), (r[1] : byte)))
			else
				trans(nfa, start, `Range (s, (r[1] : byte), (r[0] : byte)))
			;;
		;;
		-> s
	| `regex.Cap (id, r):
		-> re2nfa(nfa, start, r)
	| `regex.Plus (r, true):	std.fatal("reluctant operators not supported\n")
	| `regex.Star (r, true):	std.fatal("reluctant operators not supported\n")
	| `regex.Bol:	std.fatal("'^' specifier not supported\n")
	| `regex.Eol:	std.fatal("'$' specifier not supported\n")
	| `regex.Bow:	std.fatal("'\\<' specifier not supported\n")
	| `regex.Eow:	std.fatal("'\\>' specifier not supported\n")
	;;
}

const trans = {nfa, st, tr
	std.slpush(&nfa.edges[st], tr)
}

const addstate = {nfa
	std.slpush(&nfa.edges, [][:])
	-> nfa.edges.len - 1
}

const nfadump = {nfa
	var keys, sep
	var i

	keys = std.htkeys(nfa.accept)
	std.put("accept = {{")
	sep = ""
	for k in keys
		std.put("{}=>{}{}", k, std.htgetv(nfa.accept, k, -1), sep)
		sep = ", "
	;;
	std.put("}}\n")
	std.slfree(keys)

	std.put("digraph g = {{\n")
	for i = 0; i < nfa.edges.len; i++
		std.put("\t/* st = {}, accept = {} */\n", i, std.hthas(nfa.accept, i))
		for tr in nfa.edges[i]
			match tr
			| `Eps st:
				std.put("\t{} -> {} [label=\"É›\"]\n", i, st)
			| `Byte (st, b):
				std.put("\t{} -> {} [label=\"{}\"]\n", i, st, (b : char))
			| `Range (st, lo, hi):
				std.put("\t{} -> {} [label=\"{}-{}\"]\n", i, st, (lo : char), (hi : char))
			;;
		;;
	;;
	std.put("}}\n")
}
