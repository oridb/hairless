use std

pkg pg =
	type sym = int

	type rules = struct
		infile	: byte[:]
		start	: sym
		package	: byte[:]	/* the package name to output */
		func	: byte[:]
		uses	: byte[:][:]
		myr	: byte[:]
		rules	: rule#[:]
		toks	: tok#[:]

		nsym	: sym
		isterm	: std.bitset#
		symname : std.htab(sym, byte[:])#
		types	: std.htab(byte[:], byte[:])#
		stypes	: std.htab(sym, byte[:])#
	;;

	type dfa = struct
		initial	: std.size
		trans	: (int, int)[:][:]
		accept	: std.htab(int, sym)#	/* accept, tok id pairs */
		skip	: std.bitset#
	;;

	type nfatrans = union
		`Eps std.size	/* epsilon transition */
		`Byte (std.size, byte)	/* single byte */
		`Range (std.size, byte, byte)	/* byte range; compressed list of bytes */
	;;

	type nfa = struct
		/* state 0 is initial, state 1 is our accept state */
		edges	: nfatrans[:][:]
		accept	: std.htab(std.size, sym)#
		skip	: std.bitset#
	;;

	type lalr = struct
		start	: sym

		/* graph */
		items	: item#[:]
		shift	: (int, int, sym)[:]
		reduce	: (int, int, sym)[:]

		first	: std.bitset#[:]
		follow	: std.bitset#[:]
		nullable: std.bitset#
	;;

	type item = struct
		terms	: term[:]
		has	: std.bitset#
	;;

	type term = struct
		rule	: rule#
		dot	: int
		look	: std.bitset#
	;;


	type rule = struct
		id	: int
		lhs	: sym
		rhs	: sym[:]
		name	: byte[:]
		act	: byte[:]
	;;

	type tok = struct
		sym	: sym
		name	: byte[:]
		pat	: byte[:]
		skip	: bool
		isregex	: bool
	;;

	const TokEof	: sym = 0

	var opt_dbg
;;

var opt_dbg = false
