use std
use regex

use "types.use"
use "nfa.use"

pkg pg =
	const mkdfa	: (nfa : nfa# -> dfa#)
;;


/*
creates a DFA from an NFA using the fairly standard subset algorithm.
*/
const mkdfa = {nfa
	var states, e
	var statemap
	var j, p, c
	var dfa

	dfa = std.mk([
		.accept = std.mkht(std.inthash, std.inteq),
		.trans = std.slzalloc(2),
		.skip = nfa.skip,
	])

	/* 
	We use this for fastish lookups to check if the state
	has already been seen
	*/
	statemap = std.mkht(sethash, seteq)

	/* the failure state and the initial states are constructed */
	states = [][:]
	std.slpush(&states, std.mkbs())
	std.slpush(&states, std.mkbs())

	/* set up our initial NFA state */
	std.bsput(states[1], 0)
	closure(dfa, nfa, states[1], states[1], 1)

	/* we've seen both of these states */
	std.htput(statemap, states[0], 0)
	std.htput(statemap, states[1], 1)

	/*
	standard subset construction -- either the dragon boook or
	modern compiler implementation in ML have a good treatment
	of it.
	*/
	p = 1
	j = 0
	while j <= p
		/* loop through each byte value */
		for c = 0; c < 256; c++
			/* and add the states we can reach along this DFA state's NFA edges*/
			e = dfaedge(dfa, nfa, states[j], j, (c : byte))
			match std.htget(statemap, e)
			| `std.None:
				/* If we didn't have it, this is a new state */
				p++
				std.htput(statemap, e, p)
				/* add new state */
				std.slpush(&states, e)
				std.slpush(&dfa.trans, [][:])

				/* add the transition to it */
				std.slpush(&dfa.trans[j], (c, p))
			| `std.Some st:
				/*
				otherwise, we've already got it -- add a transition if
				this isn't a dead edge.
				*/
				std.bsfree(e)
				if st != 0
					std.slpush(&dfa.trans[j], (c, st))
				;;
			;;
		;;
		j++
	;;
	
	if opt_dbg
		dfadump(dfa)
	;;
	-> dfa
}

/*
computes the closure of all NFA states that this DFA
state can reach
*/
const dfaedge = {dfa, nfa, states, dstate, byte
	var set
	var i

	set = std.mkbs()
	closure(dfa, nfa, set, set, dstate)
	for i = 0; i < std.bsmax(states); i++
		if std.bshas(states, i)
			nfaedge(dfa, nfa, i, dstate, byte, set)
		;;
	;;
	closure(dfa, nfa, set, set, dstate)
	-> set
}

/* 
follows all consuming edges for a single NFA state
*/
const nfaedge = {dfa, nfa, st, dstate, byte, set
	addaccept(dfa, nfa, st, dstate)
	for `Byte (s, b) in nfa.edges[st]
		if b == byte 
			std.bsput(set, s)
		;;
	;;
	for `Range (s, lo, hi) in nfa.edges[st]
		if byte >= lo && byte <= hi
			std.bsput(set, s)
		;;
	;;
}

/*
takes the closure of a set of NFA states
that correspond to the DFA state dstate,
putting the result into the set 'set'.
*/
const closure = {dfa, nfa, states, set, dstate
	var i

	for i = 0; i < std.bsmax(states); i++
		if std.bshas(states, i)
			stateclosure(dfa, nfa, i, dstate, set)
		;;
	;;
}

/* 
recursively follow all epsilon transitions, tracking
whether they are accepting states.
*/
const stateclosure = {dfa, nfa, state, dstate, set
	addaccept(dfa, nfa, state, dstate)
	for `Eps next in nfa.edges[state]
		if std.bshas(set, next)
			continue
		;;
		std.bsput(set, next)
		stateclosure(dfa, nfa, next, dstate, set)
	;;
}

/*
If we accept a state in the NFA, then we want to accept
the DFA state that has it. Since a DFA state corresponds
to many NFA states, we need conflict resolution.

Pick the first state that was defined in the %tok list,
and use it. Since we number in order, the first one defined
has the lowest number.

We should probably come up with better conflict resolution:
strings before regex?
*/
const addaccept = {dfa, nfa, st, dstate
	var oldsym

	match std.htget(nfa.accept, st)
	| `std.None:	/* nothing */
	| `std.Some sym:
		oldsym = std.htgetv(dfa.accept, dstate, sym)
		if sym <= oldsym
			std.htput(dfa.accept, dstate, sym)
		;;
	;;
}

/* just useful utilities for hashing/comparing sets */
const sethash = {set
	-> std.slhash(set.bits)
}

const seteq = {a, b
	-> std.sleq(a.bits, b.bits)
}

const dfadump = {dfa
	var st

	st = 0
	std.put("dfa:\n")
	for edges in dfa.trans
		std.put("\t{}:", st)
		for (lbl, dst) in edges
			std.put(" {}({}): {}", (lbl : char), lbl, dst)
		;;
		match std.htget(dfa.accept, st)
		| `std.Some sym:	std.put(" accept: {}", sym)
		| _:
		;;
		std.put("\n")
		st++
	;;
}

